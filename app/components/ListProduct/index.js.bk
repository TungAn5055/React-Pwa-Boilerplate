import React, { useState, useEffect, memo } from 'react';
import PropTypes from 'prop-types';
import { createStructuredSelector } from 'reselect';
import { compose } from 'redux';
import { connect } from 'react-redux';
import { actionLoadProductByCategories } from '../../containers/Saga/listProduct/actions';
import {
  makeSelectListProduct
} from '../../containers/Saga/listProduct/selectors';
import { REDUX_LIST_PRODUCT } from '../../containers/Saga/listProduct/constants';
import { useInjectReducer } from '../../utils/injectReducer';
import { useInjectSaga } from '../../utils/injectSaga';
import reducer from '../../containers/Saga/listProduct/reducer';
import saga from '../../containers/Saga/listProduct/saga';
import { useQuery } from '@apollo/react-hooks';

import Item from './Item';
import Wrapper from './Wrapper';
import GET_PRODUCTS_BY_CATEGORY from "../../queries/getProductsByCategory.graphql";

function ListProduct({
     listProduct,
     loadList,
   }) {
  const key = REDUX_LIST_PRODUCT;
  useInjectReducer({ key, reducer });
  useInjectSaga({ key, saga });

  useEffect(() => {
    const categoriesId = '2';
    const {loading, error, data} = useQuery(GET_PRODUCTS_BY_CATEGORY, {
      variables: {category_id: categoriesId, pageSize: 100}
    });
    if (loading) return null;
    if (error) return <p>Error :(</p>;
    console.log(data);
    // loadList(categoriesId);
  }, []);

  return (
    // {console.log(listProducts)}
    <Wrapper>
      {/*<Item>{listProduct}</Item>*/}
      <p>aaaa</p>
    </Wrapper>
  );
}

ListProduct.propTypes = {
  listProduct: PropTypes.any,
  loadList: PropTypes.func,
};
const mapStateToProps = createStructuredSelector({
  listProductsRecommend: makeSelectListProduct(),
});
export function mapDispatchToProps(dispatch) {
  return {
    loadList: categoriesId => {
      dispatch(actionLoadProductByCategories(categoriesId));
    },
  };
}

const withConnect = connect(
  mapStateToProps,
  mapDispatchToProps,
);

export default compose(
  withConnect,
  memo,
)(ListProduct);

